
#include <fstream>

#define MAPWIDTH 500
#define MAPHEIGHT 16

void generateMap();
void smoothMap();
void removeInvalidBlocks();
void outputMap();

int map[MAPWIDTH*MAPHEIGHT] = {0};

void main()
{
	generateMap();
	smoothMap();
	removeInvalidBlocks();
	outputMap();
}

//	Generates a map made of random noise
void generateMap()
{
	for (int y = 0; y < MAPHEIGHT; ++y){
		for (int x = 0; x < MAPWIDTH; ++x){
			map[(y*MAPWIDTH) + x] = (rand()%7) + 1; //avoid map generating 0's (blank space)
		}
	}
}

//	Smooths blocks that are adjacent to make a less noisey map
void smoothMap()
{
	for (int y = 1; y < MAPHEIGHT; ++y){
		for (int x = 1; x < MAPWIDTH; ++x){
			//get the surrounding blocks, and average them.
			int a[4] = {0};
			float average = 0;
			a[0] = map[((y-1)*MAPWIDTH) + (x)];	//	Top
			a[1] = map[((y)*MAPWIDTH) + (x-1)];	//	Left
			a[2] = map[((y+1)*MAPWIDTH) + (x)];	//	Bottom
			a[3] = map[((y)*MAPWIDTH) + (x+1)];	//	Right

			for (int i = 0; i < 4; ++i){
				average += a[i];
			}
			average /= 4;

			if ( abs(map[(y*MAPWIDTH) + x] - average) < 1.5){
				map[(y*MAPWIDTH) + x] = (int)average;
			}
		}
	}
}

//	Change all pre-tilled blocks to grass, and all watered blocks to dirt
void removeInvalidBlocks()
{
	for (int y = 0; y < MAPHEIGHT; ++y){
		for (int x = 0; x < MAPWIDTH; ++x){

			switch( map[(y*MAPWIDTH) + x] ){
				case 3: map[(y*MAPWIDTH) + x] = 2; break;
				case 4:
				case 5: map[(y*MAPWIDTH) + x] = 1; break;
				default: break;
			}

		}
	}
}


//	Outputs the map to a file
void outputMap()
{
	std::ofstream file;
	file.open("C:\\Projects\\LimitSky\\resource\\maps\\blockmap.h");
	file << "// Generated By Gordon Mckendrick's Map Generator" << std::endl;
	file << std::endl;
	file << "#define MAPWIDTH " << MAPWIDTH << std::endl;
	file << "#define MAPHEIGHT " << MAPHEIGHT << std::endl;
	file << "const int map[MAPWIDTH*MAPHEIGHT] = {" << std::endl;
	
	for (int y = 0; y < MAPHEIGHT; ++y){
		file << "\t";
		for (int x = 0; x < MAPWIDTH; ++x){
			file << map[(y*MAPWIDTH) + x] << ", ";
		}
		file << std::endl;
	}
	file << "};" << std::endl;

}